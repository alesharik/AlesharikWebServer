buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.github.erizo.gradle:jcstress-gradle-plugin:0.8.0'
        classpath "gradle.plugin.me.champeau.gradle:jmh-gradle-plugin:0.3.0"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id 'java'
    id 'idea'
    id 'jacoco'
}

//====================Groups====================\\
allprojects {
    ext.DEPLOY_GROUP = 'deploy'
    ext.NATIVE_GROUP = "native"

    version = "0.3.1"
}

//====================Some vars====================\\

def userProp = project.hasProperty('user') ? project.property('user') : System.getenv('user')
def keyProp = project.hasProperty('key') ? project.property('key') : System.getenv('key')

//====================Cleaning====================\\

clean.doFirst {
    delete 'out'
}

clean.dependsOn "alesharikwebserver-internals:clean", "alesharikwebserver-api:clean", "alesharikwebserver-main:clean", "alesharikwebserver-database:clean", "alesharikwebserver-agent:clean", "alesharikwebserver-jcstress:clean", "alesharikwebserver-utils:clean", "alesharikwebserver-logging:clean", "alesharikwebserver-base:clean", "alesharikwebserver-serverless:clean",  "alesharikwebserver-test:clean", "alesharikwebserver-native:clean", "alesharikwebserver-dashboard:clean"

//====================Config====================\\

repositories {
    mavenCentral()
    mavenLocal()
}

subprojects {
    buildscript {
        repositories {
            jcenter()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }

        dependencies {
            classpath 'com.github.erizo.gradle:jcstress-gradle-plugin:0.8.0'
            classpath "gradle.plugin.me.champeau.gradle:jmh-gradle-plugin:0.3.0"
        }
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    buildDir = new File('./out/')

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    compileJava {
        options.compilerArgs << '-XDignore.symbol.file'
        options.fork = true
        options.forkOptions.executable = 'javac'
        options.encoding = "UTF-8"
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    bintray {
        user = userProp
        key = keyProp
        configurations = ['archives']
        publications = ['mavenJava']
        dryRun = false
        pkg {
            repo = 'com.alesharik'
            name = 'alesharikwebserver'
            licenses = ['GPL-3.0']
            vcsUrl = 'https://github.com/alesharik/AlesharikWebServer'
            version {
                name = this.version
                desc = 'AlesharikWebServer Snapshot release'
                released  = new Date()
                vcsTag = this.version
            }
        }
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.21'
    }

    task copyAgentLib(type: Copy, dependsOn: ':alesharikwebserver-api:shadowJar') {
        from file(buildDir.toString() + "/../../api/out/libs/alesharikwebserver-api-all.jar")
        into buildDir.toString() + "/tmp/"
    }

    task agentTests(type: Test, dependsOn: copyAgentLib) {
        group = 'test'
        useJUnit {
            includeCategories 'com.alesharik.webserver.api.documentation.test.PlatformTest'
            includeCategories 'com.alesharik.webserver.api.documentation.test.IntegrationTest'
            includeCategories 'com.alesharik.webserver.api.documentation.test.ModuleTest'
        }
        testLogging {
            exceptionFormat "full"
            showStandardStreams = true
        }
        jvmArgs '-javaagent:' + buildDir.toString() + '/tmp/alesharikwebserver-api-all.jar'
    }

    test {
        useJUnit {
            excludeCategories 'com.alesharik.webserver.api.documentation.test.PlatformTest'
            excludeCategories 'com.alesharik.webserver.api.documentation.test.IntegrationTest'
            excludeCategories 'com.alesharik.webserver.api.documentation.test.ModuleTest'
        }
        testLogging {
            exceptionFormat "full"
            showStandardStreams = true
        }
    }
}

//====================Publishing====================\\

task bintray(dependsOn: [':alesharikwebserver-api:bintrayUpload',
                         ':alesharikwebserver-main:bintrayUpload',
                         ':alesharikwebserver-database:bintrayUpload',
                         ':alesharikwebserver-internals:bintrayUpload',
                         ':alesharikwebserver-agent:bintrayUpload',
                         ':alesharikwebserver-utils:bintrayUpload',
                         ':alesharikwebserver-logging:bintrayUpload',
                         ':alesharikwebserver-base:bintrayUpload',
                         ':alesharikwebserver-serverless:bintrayUpload',
                         ':alesharikwebserver-test:bintrayUpload',
                         ':alesharikwebserver-native:bintrayUpload',
                         ':alesharikwebserver-dashboard:bintrayUpload']) {
    description = "Publish artifacts to bintray"
    group = 'distribution'
}

task publishArtifacts(dependsOn: [':alesharikwebserver-api:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-main:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-database:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-internals:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-agent:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-utils:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-logging:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-base:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-serverless:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-test:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-native:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-dashboard:publishMavenJavaPublicationToMavenLocal']) {
    description = "Publish artifacts to maven local"
    group = 'distribution'
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("/**/out/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled true
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

//====================Install tasks====================\\
task installServer(dependsOn: 'alesharikwebserver-native:installAgent') { //FIXME
}