buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.github.erizo.gradle:jcstress-gradle-plugin:0.8.0'
        classpath "gradle.plugin.me.champeau.gradle:jmh-gradle-plugin:0.3.0"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.5"
    id 'java'
    id 'idea'
    id 'jacoco'
}

//====================Groups====================\\
allprojects {
    ext.DEPLOY_GROUP = 'deploy'
    ext.NATIVE_GROUP = "native"

    version = "0.2.17"
}

//====================Some vars====================\\

def deployDir = new File("./deploy/")
def userProp = project.hasProperty('user') ? project.property('user') : System.getenv('user')
def keyProp = project.hasProperty('key') ? project.property('key') : System.getenv('key')

//====================Cleaning====================\\

clean.doFirst {
    delete 'out'
}

task cleanDeployFolder(type: Delete) {
    delete 'deploy'
}

clean.dependsOn cleanDeployFolder
clean.dependsOn "alesharikwebserver-internals:clean", "alesharikwebserver-api:clean", "alesharikwebserver-main:clean", "alesharikwebserver-database:clean", "alesharikwebserver-agent:clean", "alesharikwebserver-jcstress:cleat", "alesharikwebserver-utils:clean", "alesharikwebserver-logging:clean", "alesharikwebserver-base:clean", "alesharikwebserver-serverless:clean",  "alesharikwebserver-test:clean"

//====================Config====================\\

repositories {
    mavenCentral()
    mavenLocal()
}

subprojects {
    buildscript {
        repositories {
            jcenter()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }

        dependencies {
            classpath 'com.github.erizo.gradle:jcstress-gradle-plugin:0.8.0'
            classpath "gradle.plugin.me.champeau.gradle:jmh-gradle-plugin:0.3.0"
        }
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    buildDir = new File('./out/')

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    compileJava {
        options.compilerArgs << '-XDignore.symbol.file'
        options.fork = true
        options.forkOptions.executable = 'javac'
        options.encoding = "UTF-8"
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    bintray {
        user = userProp
        key = keyProp
        configurations = ['archives']
        publications = ['mavenJava']
        dryRun = false
        pkg {
            repo = 'com.alesharik'
            name = 'alesharikwebserver'
            licenses = ['GPL-3.0']
            vcsUrl = 'https://github.com/alesharik/AlesharikWebServer'
            version {
                name = this.version
                desc = 'AlesharikWebServer Snapshot release'
                released  = new Date()
                vcsTag = this.version
            }
        }
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.21'
    }

    task copyAgentLib(type: Copy, dependsOn: ':alesharikwebserver-api:fatJar') {
        from file(buildDir.toString() + "/../../api/out/libs/alesharikwebserver-api-all.jar")
        into buildDir.toString() + "/tmp/"
    }

    task agentTests(type: Test, dependsOn: copyAgentLib) {
        group = 'test'
//        include "**/*Test.class"
//        scanForTestClasses = false
        useJUnit {
            includeCategories 'com.alesharik.webserver.api.documentation.test.PlatformTest'
            includeCategories 'com.alesharik.webserver.api.documentation.test.IntegrationTest'
            includeCategories 'com.alesharik.webserver.api.documentation.test.ModuleTest'
        }
        testLogging {
            exceptionFormat "full"
            showStandardStreams = true
        }
        jvmArgs '-javaagent:' + buildDir.toString() + '/tmp/alesharikwebserver-api-all.jar'
    }

    test {
        useJUnit {
            excludeCategories 'com.alesharik.webserver.api.documentation.test.PlatformTest'
            excludeCategories 'com.alesharik.webserver.api.documentation.test.IntegrationTest'
            excludeCategories 'com.alesharik.webserver.api.documentation.test.ModuleTest'
        }
        testLogging {
            events "failed", "started", "passed"
            exceptionFormat "full"
            showStandardStreams = true
        }
    }
}

//====================Publishing====================\\

task bintray(dependsOn: [':alesharikwebserver-api:bintrayUpload',
                         ':alesharikwebserver-main:bintrayUpload',
                         ':alesharikwebserver-database:bintrayUpload',
                         ':alesharikwebserver-internals:bintrayUpload',
                         ':alesharikwebserver-agent:bintrayUpload',
                         ':alesharikwebserver-utils:bintrayUpload',
                         ':alesharikwebserver-logging:bintrayUpload',
                         ':alesharikwebserver-base:bintrayUpload',
                         ':alesharikwebserver-serverless:bintrayUpload',
                         ':alesharikwebserver-test:bintrayUpload']) {
    description = "Publish artifacts to bintray"
    group = 'distribution'
}

task publishArtifacts(dependsOn: [':alesharikwebserver-api:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-main:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-database:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-internals:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-agent:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-utils:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-logging:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-base:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-serverless:publishMavenJavaPublicationToMavenLocal',
                                  ':alesharikwebserver-test:publishMavenJavaPublicationToMavenLocal']) {
    description = "Publish artifacts to maven local"
    group = 'distribution'
}

//====================Preparing server to deploy====================\\

task checkDeployDir {
    group = DEPLOY_GROUP
    description = "Create deploy dir if not exitst"

    if(!deployDir.exists())
        deployDir.mkdirs()
}

task copyArtifacts(dependsOn: [checkDeployDir, ':alesharikwebserver-api:buildDeploy', 'alesharikwebserver-main:buildDeploy'], type: Copy) {
    group = DEPLOY_GROUP
    description = "Copy builded jars"

    from('./api/out/libs/') {
        include 'alesharikwebserver-api-all.jar'
    }
    from ('./main/out/libs/') {
        include 'alesharikwebserver-main.jar'
    }

    rename('alesharikwebserver-api-all.jar', 'agent.jar')
    rename('alesharikwebserver-main.jar', 'main.jar')
    into deployDir.toString()
}

task generateConfig(dependsOn: checkDeployDir) {
    group = DEPLOY_GROUP
    description = "Generates configuration"

//    def config = deployDir.toPath().resolve("configuration.xml").toAbsolutePath().toFile()
//    config.createNewFile()
//    config.text = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" +
//            "<configuration>\n" +
//            "    <api>\n" +
//            "        <config>\n" +
//            "            <fileCheckEnabled>true</fileCheckEnabled> <!-- REQUIRED. Enable config file hot reload -->\n" +
//            "        </config>\n" +
//            "        <logger>\n" +
//            "            <listenerQueueCapacity>128</listenerQueueCapacity>\n" +
//            "            <logFile>./logs/log-{\$time}.log</logFile>\n" +
//            "            <debug>false</debug>\n" +
//            "        </logger>\n" +
//            "        <pluginManager>\n" +
//            "            <folder>./plugins/</folder>\n" +
//            "            <hotReload>false</hotReload>\n" +
//            "        </pluginManager>\n" +
//            "    </api>\n" +
//            "    <modules>\n" +
//            "\n" +
//            "    </modules>\n" +
//            "    <main>\n" +
//            "        <init>\n" +
//            "\n" +
//            "        </init>\n" +
//            "    </main>\n" +
//            "</configuration>"
}

//noinspection GroovyAssignabilityCheck
task generateRootStartScript(dependsOn: checkDeployDir) {
    group = DEPLOY_GROUP
    description = "generates rootStart.sg script"

//    def startScript = deployDir.toPath().resolve("rootStart.sh").toAbsolutePath().toFile()
//    startScript.createNewFile()
//    startScript.text = "#!/usr/bin/env bash\n" +
//            "if type -p java; then\n" +
//            "    echo found java executable in PATH\n" +
//            "    _java=java\n" +
//            "elif [[ -n \"\$JAVA_HOME\" ]] && [[ -x \"\$JAVA_HOME/bin/java\" ]];  then\n" +
//            "    echo found java executable in JAVA_HOME\n" +
//            "    _java=\"\$JAVA_HOME/bin/java\"\n" +
//            "else\n" +
//            "    echo \"no java found!\"\n" +
//            "    exit 1\n" +
//            "fi\n" +
//            "sudo -s \${_java} -javaagent:agent.jar -jar main.jar"
}

task generateStartScript(dependsOn: checkDeployDir) {
    group = DEPLOY_GROUP
    description = "generates start.sg script"

//    def startScript = deployDir.toPath().resolve("start.sh").toAbsolutePath().toFile()
//    startScript.createNewFile()
//    startScript.text = "#!/usr/bin/env bash\n" +
//            "if type -p java; then\n" +
//            "    echo found java executable in PATH\n" +
//            "    _java=java\n" +
//            "elif [[ -n \"\$JAVA_HOME\" ]] && [[ -x \"\$JAVA_HOME/bin/java\" ]];  then\n" +
//            "    echo found java executable in JAVA_HOME\n" +
//            "    _java=\"\$JAVA_HOME/bin/java\"\n" +
//            "else\n" +
//            "    echo \"no java found!\"\n" +
//            "    exit 1\n" +
//            "fi\n" +
//            "\${_java} -javaagent:agent.jar -jar main.jar"
}

task copyServerDashboard(dependsOn: checkDeployDir, type: Copy) {
    group = DEPLOY_GROUP

//    from(rootProject.projectDir.toString() + "/serverDashboard/")
//    into(deployDir.toString() + "/serverDashboard/")
}

task generateFiles(dependsOn: [generateConfig, generateStartScript, generateRootStartScript, copyServerDashboard]) {
    group = DEPLOY_GROUP
}

task prepareDeploy(dependsOn: [cleanDeployFolder, generateFiles, copyArtifacts]) {
    group = DEPLOY_GROUP
    description = "Build server and configure it"

    doLast {
        println 'Take server at ./deploy folder'
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("/**/out/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled true
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

//TODO move error page generators to api
//TODO add object storage for request