apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "com.github.johnrengelman.shadow"

def nativesSrc = 'com/alesharik/webserver/api/native/'
def nativeClasses = new ArrayList<String>()
nativeClasses.add("com.alesharik.webserver.api.Utils")

buildDir = new File('./out/')
def nativeLibsDir = new File('./out/nativeLibs')


//====================Deploy====================\\

task buildDeploy {

}

//====================Cleaning====================\\

clean.doFirst {
    delete 'deploy'
    delete 'build'
    delete 'out'
    delete buildDir.toString()
    delete projectDir.toString() + "/reporting/"
}

//====================Config====================\\

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    main {
        java {
            srcDirs 'src'
        }
    }
    test {
        java {
            srcDirs 'test'
        }
        resources {
            srcDirs 'test-res'
        }
    }
}

dependencies {
    compile group: 'com.lmax', name: 'disruptor', version: '3.3.6'
    compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.1.1'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.9.2'
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4-1205-jdbc42'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
    compile (group: 'log4j', name: 'log4j', version: '1.2.15') {
        exclude module: 'jms'
        exclude module: 'jmxtools'
        exclude module: 'jmxri'
    }

    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile group: 'com.opencsv', name: 'opencsv', version: '3.9'

    compile group: 'org.glassfish.tyrus', name: 'tyrus-container-jdk-client', version: '1.13.1'
    compile group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly', version: '1.2.1'
    compile group: 'org.glassfish.tyrus', name: 'tyrus-spi', version: '1.13.1'
    compile group: 'org.glassfish.tyrus', name: 'tyrus-core', version: '1.13.1'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-framework', version: '2.3.3'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-http-server', version: '2.3.3'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-http-servlet', version: '2.3.3'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-framework-monitoring', version: '2.3.3'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-http-monitoring', version: '2.3.3'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-http-server-monitoring', version: '2.3.3'

    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.2'
    compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.6'
    compile group: 'org.glassfish.grizzly', name: 'grizzly-websockets', version: '2.3.3'

    compile group: 'javax.websocket', name: 'javax.websocket-api', version: '1.0'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'

    compile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.18'
    compile group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.18'

    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.21'
    testCompile project(':alesharikwebserver-test')
    compile group: 'org.openjdk.jcstress', name: 'jcstress-core', version: '0.3'

    compile files('one-nio/one-nio.jar')
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'

    compile project(':alesharikwebserver-internals')
    compile project(':alesharikwebserver-agent')
}


//====================Native====================\\

task generateJavaHeaders(dependsOn: compileJava, type: Exec) {
    group = NATIVE_GROUP

    def classesDir = sourceSets.main.output.classesDirs[0]

    def classpath = ""
    sourceSets.main.output.classesDirs.forEach({
        if(!classpath.empty)
            classpath += ":"
        classpath += it.toString()
    })

    workingDir classesDir
    executable "${System.properties["java.home"]}/../bin/javah"
    args "-d", classesDir.toString() + '/' + nativesSrc
    args "-classpath", buildDir.parent.toString() + "/one-nio/one-nio.jar:" + classpath
    doFirst {
        nativeClasses.forEach{ clazz -> args clazz }
    }

    errorOutput = System.out
}

task addJavaCritical(dependsOn: generateJavaHeaders) {
    group = NATIVE_GROUP
    doFirst {
        System.err.println("Asd")
        new File(sourceSets.main.output.classesDir.toString() + '/' + nativesSrc).listFiles().each {
//            System.err.println("test")
//            System.err.println(it)
//            if (it.name == "com_alesharik_webserver_api_Utils.h") {
//                it.text = it.text
//                        .replaceAll("Java_com_alesharik_webserver_api_Utils_cast__J", "JavaCritical_com_alesharik_webserver_api_Utils_cast__J")
//                        .replaceAll("Java_com_alesharik_webserver_api_Utils_cast__I", "JavaCritical_com_alesharik_webserver_api_Utils_cast__I")
//            }
        }
    }
}

task copyNativeDir(dependsOn: compileJava, type: Copy) {
    group = NATIVE_GROUP

    from './src/' + nativesSrc
    into sourceSets.main.output.classesDir.toString() + '/' + nativesSrc
}

task executeCmake(dependsOn: [copyNativeDir, addJavaCritical], type: Exec) {
    group = NATIVE_GROUP

    workingDir sourceSets.main.output.classesDir.toString() + '/' + nativesSrc
    commandLine 'cmake', '.'

    errorOutput = System.out
}

task makeNatives(dependsOn: executeCmake, type: Exec) {
    group = NATIVE_GROUP

    workingDir sourceSets.main.output.classesDirs[0].toString() + '/' + nativesSrc

    commandLine "make"

    errorOutput = System.out
}

task copyNatives(dependsOn: makeNatives, type: Copy) {
    group = NATIVE_GROUP

    sourceSets.main.output.classesDirs.forEach({
        from(it.toString() + '/' + nativesSrc) {
            include '**/*.so'
            include '**/*.dll'
        }
    })

    from(projectDir.toString() + "/one-nio/native") {
        include '**/*.so'
        include '**/*.dll'
    }
    includeEmptyDirs = false
    into nativeLibsDir.toString()
}

//====================Build====================\\

task checkDirs {
    if(!buildDir.exists())
        buildDir.mkdirs()
    if(!nativeLibsDir.exists())
        nativeLibsDir.mkdirs()
}

build.dependsOn checkDirs
build.dependsOn test

buildDeploy.dependsOn checkDirs
buildDeploy.dependsOn test

task fatJar(dependsOn: shadowJar) {}

test.dependsOn fatJar

shadowJar {
    baseName = project.name + '-all'
    classifier = null
    version = null

    from (nativeLibsDir) {
        include '**/*.so'
        include '**/*.dll'
    }
}

jar {
    baseName = project.name
    archiveName = baseName + ".jar"
    manifest {
        attributes(
                'Premain-Class': 'com.alesharik.webserver.api.agent.Agent',
                'Agent-Class': 'com.alesharik.webserver.api.agent.Agent',
                'Can-Retransform-Classes': 'true',
                'Can-Redefine-Classes': 'true'
        )
    }
    from {
        configurations.compile
                .filter { it.toString().contains("one-nio") }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
    from (nativeLibsDir) {
        include '**/*.so'
        include '**/*.dll'
    }
}

test {
//    jvmArgs '-javaagent:' + buildDir.toString() + '/libs/alesharikwebserver-api-all.jar'
}

javadoc.destinationDir = new File(buildDir.toString() + '/javadoc/')

task packageJavadoc(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
    group = 'build'
}

task packageSources(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
    group = 'build'
}

build {}

shadowJar.dependsOn copyNatives
jar.dependsOn copyNatives
jar.dependsOn test

//====================Publishing====================\\

artifacts {
    archives packageJavadoc
    archives packageSources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.alesharik'
            artifactId 'alesharikwebserver-api'
            version this.version

            from components.java
        }
    }
}

test {
    testLogging {
        events "failed"
        exceptionFormat "short"
    }
}

test.testLogging.showStandardStreams = true