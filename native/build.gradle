/*
 *  This file is part of AlesharikWebServer.
 *
 *     AlesharikWebServer is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     AlesharikWebServer is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with AlesharikWebServer.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

apply plugin: 'java'
apply plugin: 'idea'

buildDir = new File('./out/')

sourceSets {
    main {
        java {
            srcDirs 'src'
        }
        resources {
            srcDirs 'res-generated'
        }
    }
    test {
        java {
            srcDirs 'test'
        }
        resources {
            srcDirs 'test-res'
        }
    }
}

dependencies {
    compile project(':alesharikwebserver-api')
}

clean {
    delete "./rust/agent/target"
    delete "./rust/library/target"
    delete "./rust/agent/Cargo.lock"
    delete "./rust/library/Cargo.lock"
    delete buildDir.toString()
}

task buildLibrary(type: Exec) {
    workingDir "./rust/library"

    executable "bash"
    args "-c", "cargo build --release"
}

task copyNative(type: Copy, dependsOn: buildLibrary) {
    from("./rust/library/target/release") {
        include "*.so"
    }
    into "./res-generated/"

    doFirst {
        File f = new File("./res-generated/")
        if(!f.exists())
            f.mkdir()
    }
}

task buildAgent(type: Exec) {
    workingDir "./rust/agent"

    executable "bash"
    args "-c", "cargo build --release"
}

task installAgent() {
    //TODO
}

javadoc.destinationDir = new File(buildDir.toString() + '/javadoc/')

task packageJavadoc(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
    group = 'build'
}

task packageSources(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
    group = 'build'
}

artifacts {
    archives packageJavadoc
    archives packageSources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.alesharik'
            artifactId 'alesharikwebserver-native'
            version this.version

            from components.java
        }
    }
}

processResources.dependsOn copyNative
build.dependsOn test
build.dependsOn buildAgent